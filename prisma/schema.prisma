datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  createdAt     DateTime       @default(now())
  bankStatments BankStatment[]
  expenses      Expense[]
}

model Year {
  yearNumber Int     @id
  months     Month[]
}

model Month {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  numeric       Int            @unique
  yearId        Int
  year          Year           @relation(fields: [yearId], references: [yearNumber])
  expenses      Expense[]
  bankStatments BankStatment[]
}

model Bank {
  id            Int            @id @default(autoincrement())
  name          String
  balance       Float
  expenses      Expense[]
  bankStatments BankStatment[]
}

model Debit {
  id       Int       @id @default(autoincrement())
  balance  Float
  expenses Expense[]
}

model Expense {
  id            Int            @id @default(autoincrement())
  name          String?
  description   String?
  total         Float
  expenseDate   DateTime
  createdAt     DateTime       @default(now())
  debitId       Int
  bankId        Int
  debit         Debit          @relation(fields: [debitId], references: [id])
  bank          Bank           @relation(fields: [bankId], references: [id])
  bankStatments BankStatment[]
  User          User?          @relation(fields: [userId], references: [id])
  userId        Int?
  Month         Month?         @relation(fields: [monthId], references: [id])
  monthId       Int?
}

model BankStatment {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  userId       Int
  expenseId    Int
  monthId      Int
  balanceTotal Float
  balanceReal  Float
  user         User     @relation(fields: [userId], references: [id])
  expense      Expense  @relation(fields: [expenseId], references: [id])
  month        Month    @relation(fields: [monthId], references: [id])
  Bank         Bank?    @relation(fields: [bankId], references: [id])
  bankId       Int?

  @@unique([userId, monthId])
}
